import './style.css';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function renderHome() {
  return `
    <section class="hero">
      <div class="container">
        <h1>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ê—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∏</h1>
        <p>–í–æ–ø–ª–æ—Ç–∏—Ç–µ –≤–∞—à–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∏–¥–µ–∏ –≤ –∂–∏–∑–Ω—å —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –º–æ—â–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞</p>
        <div class="hero-buttons">
          <a href="#" class="btn btn-primary" onclick="navigate('register')">–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ</a>
          <a href="#" class="btn btn-secondary" onclick="navigate('login')">–í–æ–π—Ç–∏</a>
        </div>
      </div>
    </section>
    <section class="features container">
      <h2 class="section-title">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h2>
      <div class="features-grid">
        <div class="feature-card">
          <div class="feature-icon">üéµ</div>
          <h3>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ê—É–¥–∏–æ –†–µ–¥–∞–∫—Ç–æ—Ä</h3>
          <p>–ú–æ—â–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏</p>
          <ul class="feature-list">
            <li>–ú–Ω–æ–≥–æ–¥–æ—Ä–æ–∂–µ—á–Ω–∞—è –∑–∞–ø–∏—Å—å</li>
            <li>–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã</li>
            <li>MIDI –ø–æ–¥–¥–µ—Ä–∂–∫–∞</li>
          </ul>
        </div>
        <div class="feature-card">
          <div class="feature-icon">üéö</div>
          <h3>–°–≤–µ–¥–µ–Ω–∏–µ –∏ –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥</h3>
          <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏</p>
          <ul class="feature-list">
            <li>–≠–∫–≤–∞–ª–∏–∑–∞—Ü–∏—è</li>
            <li>–ö–æ–º–ø—Ä–µ—Å—Å–∏—è</li>
            <li>–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</li>
          </ul>
        </div>
        <div class="feature-card">
          <div class="feature-icon">üë•</div>
          <h3>–°–æ–≤–º–µ—Å—Ç–Ω–∞—è –†–∞–±–æ—Ç–∞</h3>
          <p>–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –º—É–∑—ã–∫–∞–Ω—Ç–∞–º–∏</p>
          <ul class="feature-list">
            <li>–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ</li>
            <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏</li>
            <li>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è</li>
          </ul>
        </div>
      </div>
    </section>   
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞
function renderLogin() {
  return `
    <section class="auth-section">
      <div class="auth-container">
        <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</h2>
        <p class="auth-description">–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É</p>
        <form class="auth-form" onsubmit="handleLogin(event)">
          <div class="form-group">
            <label for="name">–ò–º—è:</label>
            <input type="text" id="name" required placeholder="–í–∞—à–µ –∏–º—è">
          </div>
          <div class="form-group">
            <label for="password">–ü–∞—Ä–æ–ª—å:</label>
            <input type="password" id="password" required placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å">
            <a href="#" class="forgot-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</a>
          </div>
          <button type="submit" class="btn btn-primary btn-block">–í–æ–π—Ç–∏</button>
          <div class="social-login">
            <button type="button" class="btn btn-google">Google</button>
            <button type="button" class="btn btn-facebook">Facebook</button>
          </div>
        </form>
        <p class="auth-links">
          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href="#" onclick="navigate('register')">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
        </p>
      </div>
    </section>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
function renderRegister() {
  return `
    <section class="auth-section">
      <div class="auth-container">
        <h2>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</h2>
        <p class="auth-description">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤</p>
        <form class="auth-form" onsubmit="handleRegister(event)">
          <div class="form-group">
            <label for="name">–ò–º—è:</label>
            <input type="text" id="name" required placeholder="–í–∞—à–µ –∏–º—è">
          </div>
          <div class="form-group">
            <label for="password">–ü–∞—Ä–æ–ª—å:</label>
            <input type="password" id="password" required minlength="8" 
                   placeholder="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤">
            <div class="password-strength"></div>
          </div>
          <div class="form-group">
            <label for="confirm-password">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</label>
            <input type="password" id="confirm-password" required 
                   placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å">
          </div>
          <div class="form-group">
            <label class="checkbox-label">
              <input type="checkbox" required>
              –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å <a href="#">—É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a>
            </label>
          </div>
          <button type="submit" class="btn btn-primary btn-block">–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
          <div class="social-login">
            <button type="button" class="btn btn-google">Google</button>
            <button type="button" class="btn btn-facebook">Facebook</button>
          </div>
        </form>
        <p class="auth-links">
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <a href="#" onclick="navigate('login')">–í–æ–π—Ç–∏</a>
        </p>
      </div>
    </section>
  `;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
function renderWorkspace() {
  return `
    <div class="workspace">
      <div class="workspace-header">
        <div class="workspace-title">
          <h2>–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</h2>
          <input type="text" class="project-name" value="–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞">
        </div>
        <div class="workspace-controls">
          <button class="btn btn-secondary" onclick="saveProject()">
            <i class="icon-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
          <button class="btn btn-primary" onclick="handleFileUpload()">
            <i class="icon-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ
          </button>
          <input type="file" id="audio-upload" accept="audio/*" multiple style="display: none" 
                 onchange="handleAudioFile(event)">
        </div>
      </div>
      
      <div class="tracks-container">
        <div class="tracks-header">
          <div class="track-controls">
            <button class="btn btn-play" onclick="playAll()">
              <i class="icon-play"></i> –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
            </button>
            <button class="btn btn-stop" onclick="stopAll()">
              <i class="icon-stop"></i> –°—Ç–æ–ø
            </button>
            <button class="btn btn-record" onclick="startRecording()">
              <i class="icon-record"></i> –ó–∞–ø–∏—Å—å
            </button>
          </div>
          <div class="transport-controls">
            <span class="time-display">00:00:00</span>
            <div class="transport-buttons">
              <button class="btn btn-rewind" onclick="rewind()">
                <i class="icon-rewind"></i>
              </button>
              <button class="btn btn-forward" onclick="forward()">
                <i class="icon-forward"></i>
              </button>
            </div>
          </div>
          <div class="master-volume">
            <label>–û–±—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å</label>
            <input type="range" min="0" max="100" value="100" class="volume-slider" 
                   onchange="setMasterVolume(this.value)">
            <span class="volume-value">100%</span>
          </div>
        </div>
        
        <div class="timeline">
          <div class="timeline-ruler"></div>
        </div>
        
        <div id="tracks-list" class="tracks-list">
          <!-- –¢—Ä–µ–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å -->
        </div>
      </div>

      <div class="effects-panel">
        <div class="effects-header">
          <h3>–≠—Ñ—Ñ–µ–∫—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞</h3>
          <button class="btn btn-add-effect">–î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç</button>
        </div>
        <div class="effect-controls">
          <div class="effect-group">
            <div class="effect-header">
              <label>–†–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏—è</label>
              <button class="btn btn-toggle-effect">–í–∫–ª</button>
            </div>
            <div class="effect-params">
              <div class="param-group">
                <label>–†–∞–∑–º–µ—Ä</label>
                <input type="range" min="0" max="100" value="50" 
                       onchange="setReverbSize(this.value)">
              </div>
              <div class="param-group">
                <label>–ó–∞—Ç—É—Ö–∞–Ω–∏–µ</label>
                <input type="range" min="0" max="100" value="30" 
                       onchange="setReverbDecay(this.value)">
              </div>
            </div>
          </div>
          <div class="effect-group">
            <div class="effect-header">
              <label>–≠–∫–≤–∞–ª–∞–π–∑–µ—Ä</label>
              <button class="btn btn-toggle-effect">–í–∫–ª</button>
            </div>
            <div class="eq-controls">
              <div class="eq-band">
                <span>–ù–∏–∑–∫–∏–µ</span>
                <input type="range" min="-12" max="12" value="0" orient="vertical" 
                       onchange="setEQ(0, this.value)">
                <span>0 dB</span>
              </div>
              <div class="eq-band">
                <span>–°—Ä–µ–¥–Ω–∏–µ</span>
                <input type="range" min="-12" max="12" value="0" orient="vertical" 
                       onchange="setEQ(1, this.value)">
                <span>0 dB</span>
              </div>
              <div class="eq-band">
                <span>–í—ã—Å–æ–∫–∏–µ</span>
                <input type="range" min="-12" max="12" value="0" orient="vertical" 
                       onchange="setEQ(2, this.value)">
                <span>0 dB</span>
              </div>
            </div>
          </div>
          <div class="effect-group">
            <div class="effect-header">
              <label>–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä</label>
              <button class="btn btn-toggle-effect">–í—ã–∫–ª</button>
            </div>
            <div class="effect-params">
              <div class="param-group">
                <label>–ü–æ—Ä–æ–≥</label>
                <input type="range" min="-60" max="0" value="-24" 
                       onchange="setCompressorThreshold(this.value)">
              </div>
              <div class="param-group">
                <label>–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ</label>
                <input type="range" min="1" max="20" value="4" 
                       onchange="setCompressorRatio(this.value)">
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
}

// –ê—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
let audioContext;
let masterGainNode;
let tracks = [];
let reverbNode;
let eqNodes = [];
let compressorNode;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web Audio API
function initAudio() {
  audioContext = new (window.AudioContext || window.webkitAudioContext)();
  masterGainNode = audioContext.createGain();
  
  // –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  reverbNode = audioContext.createConvolver();
  compressorNode = audioContext.createDynamicsCompressor();
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä
  const frequencies = [60, 1000, 8000];
  eqNodes = frequencies.map(freq => {
    const filter = audioContext.createBiquadFilter();
    filter.type = 'peaking';
    filter.frequency.value = freq;
    filter.Q.value = 1;
    return filter;
  });
  
  // –°–æ–µ–¥–∏–Ω—è–µ–º —É–∑–ª—ã
  masterGainNode.connect(reverbNode);
  reverbNode.connect(compressorNode);
  eqNodes.reduce((prev, curr) => {
    prev.connect(curr);
    return curr;
  }, compressorNode).connect(audioContext.destination);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
window.handleFileUpload = () => {
  document.getElementById('audio-upload').click();
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
window.handleAudioFile = async (event) => {
  const files = event.target.files;
  if (!files.length) return;

  for (const file of files) {
    const reader = new FileReader();
    reader.onload = async (e) => {
      const arrayBuffer = e.target.result;
      try {
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
        addTrack(audioBuffer, file.name);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ:', error);
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ ${file.name}`);
      }
    };
    reader.readAsArrayBuffer(file);
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
function addTrack(audioBuffer, name) {
  const track = {
    buffer: audioBuffer,
    name: name,
    gainNode: audioContext.createGain(),
    source: null,
    playing: false,
    muted: false,
    solo: false,
    volume: 1,
    pan: 0
  };

  // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–π —É–∑–µ–ª
  const panNode = audioContext.createStereoPanner();
  track.panNode = panNode;

  // –°–æ–µ–¥–∏–Ω—è–µ–º —É–∑–ª—ã
  track.gainNode.connect(panNode);
  panNode.connect(masterGainNode);
  
  tracks.push(track);
  renderTracks();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–µ–∫–æ–≤
function renderTracks() {
  const tracksList = document.getElementById('tracks-list');
  tracksList.innerHTML = tracks.map((track, index) => `
    <div class="track ${track.playing ? 'playing' : ''} ${track.muted ? 'muted' : ''} ${track.solo ? 'solo' : ''}">
      <div class="track-info">
        <div class="track-header">
          <span class="track-name" title="${track.name}">${track.name}</span>
          <div class="track-buttons">
            <button class="btn btn-mute ${track.muted ? 'active' : ''}" 
                    onclick="toggleMute(${index})">M</button>
            <button class="btn btn-solo ${track.solo ? 'active' : ''}" 
                    onclick="toggleSolo(${index})">S</button>
          </div>
        </div>
        <div class="track-controls">
          <button class="btn btn-play" onclick="playTrack(${index})">
            ${track.playing ? '‚è∏' : '‚ñ∂'}
          </button>
          <div class="track-sliders">
            <div class="volume-control">
              <input type="range" min="0" max="100" 
                     value="${track.volume * 100}" 
                     onchange="setTrackVolume(${index}, this.value)">
              <span class="volume-value">${Math.round(track.volume * 100)}%</span>
            </div>
            <div class="pan-control">
              <input type="range" min="-100" max="100" 
                     value="${track.pan * 100}" 
                     onchange="setTrackPan(${index}, this.value)">
              <span class="pan-value">Pan: ${track.pan}</span>
            </div>
          </div>
        </div>
      </div>
      <div class="track-waveform" id="waveform-${index}">
        <!-- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ª–Ω—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å -->
      </div>
    </div>
  `).join('');

  // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞
  tracks.forEach((track, index) => {
    if (track.buffer) {
      drawWaveform(track.buffer, `waveform-${index}`);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–æ–ª–Ω—ã
function drawWaveform(buffer, containerId) {
  const container = document.getElementById(containerId);
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  
  canvas.width = container.clientWidth;
  canvas.height = container.clientHeight;
  container.appendChild(canvas);

  const data = buffer.getChannelData(0);
  const step = Math.ceil(data.length / canvas.width);
  const amp = canvas.height / 2;

  ctx.fillStyle = '#1a1a1a';
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  ctx.beginPath();
  ctx.moveTo(0, amp);

  for (let i = 0; i < canvas.width; i++) {
    let min = 1.0;
    let max = -1.0;
    
    for (let j = 0; j < step; j++) {
      const datum = data[(i * step) + j];
      if (datum < min) min = datum;
      if (datum > max) max = datum;
    }
    
    ctx.lineTo(i, (1 + min) * amp);
    ctx.lineTo(i, (1 + max) * amp);
  }

  ctx.strokeStyle = '#4CAF50';
  ctx.stroke();
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
window.playTrack = (index) => {
  const track = tracks[index];
  if (track.playing) {
    stopTrack(index);
    return;
  }

  track.source = audioContext.createBufferSource();
  track.source.buffer = track.buffer;
  track.source.connect(track.gainNode);
  
  track.source.onended = () => {
    track.playing = false;
    renderTracks();
  };
  
  track.source.start();
  track.playing = true;
  renderTracks();
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–∫–∞
window.stopTrack = (index) => {
  const track = tracks[index];
  if (!track.playing) return;

  track.source.stop();
  track.source.disconnect();
  track.playing = false;
  renderTracks();
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞
window.setTrackVolume = (index, value) => {
  const track = tracks[index];
  track.volume = value / 100;
  track.gainNode.gain.setValueAtTime(track.volume, audioContext.currentTime);
  renderTracks();
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–æ—Ä–∞–º—ã —Ç—Ä–µ–∫–∞
window.setTrackPan = (index, value) => {
  const track = tracks[index];
  track.pan = value / 100;
  track.panNode.pan.setValueAtTime(track.pan, audioContext.currentTime);
  renderTracks();
};

// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º—å—é—Ç–∞
window.toggleMute = (index) => {
  const track = tracks[index];
  track.muted = !track.muted;
  track.gainNode.gain.setValueAtTime(
    track.muted ? 0 : track.volume,
    audioContext.currentTime
  );
  renderTracks();
};

// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–ª–æ
window.toggleSolo = (index) => {
  const track = tracks[index];
  track.solo = !track.solo;
  
  const hasSoloTrack = tracks.some(t => t.solo);
  
  tracks.forEach((t, i) => {
    const shouldPlay = !hasSoloTrack || t.solo;
    t.gainNode.gain.setValueAtTime(
      shouldPlay && !t.muted ? t.volume : 0,
      audioContext.currentTime
    );
  });
  
  renderTracks();
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
window.setMasterVolume = (value) => {
  masterGainNode.gain.setValueAtTime(value / 100, audioContext.currentTime);
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ç–æ—Ä–∞
window.setReverbSize = (value) => {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
};

window.setReverbDecay = (value) => {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ç—É—Ö–∞–Ω–∏—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–∫–≤–∞–ª–∞–π–∑–µ—Ä–∞
window.setEQ = (band, value) => {
  eqNodes[band].gain.setValueAtTime(value, audioContext.currentTime);
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞
window.setCompressorThreshold = (value) => {
  compressorNode.threshold.setValueAtTime(value, audioContext.currentTime);
};

window.setCompressorRatio = (value) => {
  compressorNode.ratio.setValueAtTime(value, audioContext.currentTime);
};
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º
window.handleLogin = (event) => {
  event.preventDefault();
  const name = document.getElementById('name').value;
  const password = document.getElementById('password').value;
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  console.log('–í—Ö–æ–¥:', { name, password });
  
  // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
  localStorage.setItem('user', JSON.stringify({ name }));
  navigate('workspace');
};

window.handleRegister = (event) => {
  event.preventDefault();
  const name = document.getElementById('name').value;
  const password = document.getElementById('password').value;
  const confirmPassword = document.getElementById('confirm-password').value;
  
  if (password !== confirmPassword) {
    alert('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
    return;
  }
  
  if (password.length < 8) {
    alert('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');
    return;
  }
  
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', { name, password });
  
  // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  localStorage.setItem('user', JSON.stringify({ name, password }));
  navigate('workspace');
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
  document.querySelector('#app').innerHTML = `
    <header class="header">
      <nav class="container nav">
        <a href="#" class="nav-logo" onclick="navigate('home')">
          <img src="/logo.svg" alt="Logo" class="nav-logo-img">
          <span>–ê—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞ –ú—É–∑—ã–∫–∏</span>
        </a>
        <div class="nav-links">
          <a href="#" class="nav-link" onclick="navigate('home')">–ì–ª–∞–≤–Ω–∞—è</a>
          <a href="#" class="nav-link" onclick="navigate('login')">–í—Ö–æ–¥</a>
          <a href="#" class="nav-link" onclick="navigate('register')">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
        </div>
      </nav>
    </header>
    <main></main>
    <footer class="footer">
      <div class="container">
        <p>&copy; 2023 –ê—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞ –ú—É–∑—ã–∫–∏. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
      </div>
    </footer>
  `;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  navigate('home');
});
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
  const app = document.getElementById('app');
  if (app) {
    // –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    app.innerHTML = renderHome();
  }
});

// –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
window.navigate = function(page) {
  const app = document.getElementById('app');
  switch(page) {
    case 'home':
      app.innerHTML = renderHome();
      break;
    case 'login':
      app.innerHTML = renderLogin();
      break;
    case 'register':
      app.innerHTML = renderRegister();
      break;
    case 'workspace':
      app.innerHTML = renderWorkspace();
      initAudio();
      break;
  }
}